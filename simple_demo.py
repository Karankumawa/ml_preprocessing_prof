#!/usr/bin/env python3
"""
Simple Demo Script for ML Preprocessing Profiler
рдЖрд╕рд╛рди рдбреЗрдореЛ рд╕реНрдХреНрд░рд┐рдкреНрдЯ рдЬреЛ library рдХрд╛ рдЙрдкрдпреЛрдЧ рджрд┐рдЦрд╛рддреА рд╣реИ
"""

print("ЁЯЪА ML Preprocessing Profiler - Simple Demo")
print("=" * 50)

# Method 1: рд╕рдмрд╕реЗ рдЖрд╕рд╛рди рддрд░реАрдХрд╛ (Recommended)
print("\nЁЯУЭ Method 1: рд╕рдмрд╕реЗ рдЖрд╕рд╛рди рддрд░реАрдХрд╛")
print("from ml_preprocessing_profiler import evaluate_preprocessors")

try:
    from ml_preprocessing_profiler import evaluate_preprocessors
    from sklearn.datasets import load_iris
    from sklearn.ensemble import RandomForestClassifier
    
    print("тЬЕ Import successful!")
    
    # Load data
    X, y = load_iris(return_X_y=True)
    model = RandomForestClassifier(random_state=42)
    
    print(f"ЁЯУК Dataset loaded: {X.shape[0]} samples, {X.shape[1]} features")
    print("ЁЯдЦ Model: RandomForestClassifier")
    
    # Run evaluation
    print("\nЁЯФД Running preprocessing evaluation...")
    results = evaluate_preprocessors(X, y, model, test_size=0.2, random_state=42)
    
    print(f"тЬЕ Evaluation completed!")
    print(f"ЁЯУИ Generated {len(results)} preprocessing combinations")
    
    if results:
        best_result = max(results, key=lambda x: x['score'])
        print(f"ЁЯПЖ Best score: {best_result['score']:.4f}")
        print(f"ЁЯФз Best pipeline: {best_result.get('scaler', 'None')} + {best_result.get('encoder', 'None')} + {best_result.get('imputer', 'None')}")
    
except Exception as e:
    print(f"тЭМ Error: {e}")

# Method 2: Alternative import method
print("\n" + "=" * 50)
print("ЁЯУЭ Method 2: Alternative import method")
print("from ml_preprocessing_profiler.core import evaluate_preprocessors")

try:
    from ml_preprocessing_profiler.core import evaluate_preprocessors
    print("тЬЕ Alternative import successful!")
except Exception as e:
    print(f"тЭМ Error: {e}")

# Method 3: Direct package import
print("\n" + "=" * 50)
print("ЁЯУЭ Method 3: Direct package import")
print("import ml_preprocessing_profiler")

try:
    import ml_preprocessing_profiler
    print(f"тЬЕ Package import successful!")
    print(f"ЁЯУж Version: {ml_preprocessing_profiler.__version__}")
    print(f"ЁЯСитАНЁЯТ╗ Author: {ml_preprocessing_profiler.__author__}")
except Exception as e:
    print(f"тЭМ Error: {e}")

print("\n" + "=" * 50)
print("ЁЯОЙ Demo completed successfully!")
print("\nЁЯТб рдЕрдм рдЖрдк library рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ:")
print("""
# рд╕рдмрд╕реЗ рдЖрд╕рд╛рди рддрд░реАрдХрд╛:
from ml_preprocessing_profiler import evaluate_preprocessors
from sklearn.datasets import load_iris
from sklearn.ensemble import RandomForestClassifier

X, y = load_iris(return_X_y=True)
model = RandomForestClassifier()
results = evaluate_preprocessors(X, y, model)
""")

print("\nЁЯФз рдЕрдЧрд░ рдЕрднреА рднреА error рдЖрдП рддреЛ:")
print("1. рд╕рд╣реА directory рдореЗрдВ рд╣реИрдВ рдпрд╛ рдирд╣реАрдВ рдЪреЗрдХ рдХрд░реЗрдВ")
print("2. pip install -e . рдЪрд▓рд╛рдПрдВ")
print("3. Python environment рд╕рд╣реА рд╣реИ рдпрд╛ рдирд╣реАрдВ рдЪреЗрдХ рдХрд░реЗрдВ")
print("4. python -c 'import ml_preprocessing_profiler' рдЯреЗрд╕реНрдЯ рдХрд░реЗрдВ")
